<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				xmlns:p="http://www.springframework.org/schema/p" 
				xmlns:sws="http://www.springframework.org/schema/web-services"
    			xmlns:oxm="http://www.springframework.org/schema/oxm"
       			xsi:schemaLocation=
       				"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
       	 			http://www.springframework.org/schema/web-services
       				http://www.springframework.org/schema/web-services/web-services-2.0.xsd
       				http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-4.2.xsd">


			<bean
				class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
				<property name="location">
					<value>classpath:vu360-lcms.properties</value>
				</property>
			</bean>

	<!--
			* The WebServiceTemplate requires a messageSender and messageFactory 
			* In order to facilitate the sending of plain Java objects, the WebServiceTemplate requires a marshaller and unmarshaller.
			* The WebServiceTemplate class uses an URI as the message destination. 
			See: http://static.springsource.org/spring-ws/sites/2.0/reference/html/client.html#client-web-service-template
	-->
			<bean id="webServiceTemplate" class="org.springframework.ws.client.core.WebServiceTemplate"
				p:marshaller-ref="jaxbMarshaller"
				p:unmarshaller-ref="jaxbMarshaller"
				p:defaultUri="${lcms.signUp.author.webservice.URL}"
				p:messageSender-ref="messageSender">
				<constructor-arg ref="messageFactory"/> 
			</bean>


	<!-- 
			There are two implementations of the WebServiceMessageSender:
			HttpUrlConnectionMessageSender and CommonsHttpMessageSender.
			
			The CommonsHttpMessageSender provides advanced and easy-to-use functionality 
			(such as authentication, HTTP connection pooling, and so forth).
			This uses the Jakarta Commons HttpClient. 
			See http://static.springsource.org/spring-ws/sites/2.0/reference/html/client.html#client-web-service-template
	 -->
	<bean id="messageSender" class="org.springframework.ws.transport.http.CommonsHttpMessageSender"/>
	
	<!-- 
			There are two message factories for SOAP: SaajSoapMessageFactory and AxiomSoapMessageFactory. 
			If no message factory is specified (via the messageFactory property), Spring-WS will use 
			the SaajSoapMessageFactory by default.
			See: http://static.springsource.org/spring-ws/sites/2.0/reference/html/client.html#client-web-service-template
	 -->
	<bean id="messageFactory" class="org.springframework.ws.soap.saaj.SaajSoapMessageFactory"/>
		
	<!-- Here we use the Jaxb2 marshaller to marshall and unmarshall our Java objects -->	
	<bean id="jaxbMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller"
		p:contextPath="com.softech.vu360.lms.selfservice.webservices.orderservice"/>
		
</beans>